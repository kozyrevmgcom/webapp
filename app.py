import streamlit as st
from clickhouse_driver import Client
from clickhouse_driver.errors import ServerException
import pandas as pd
import time
from datetime import date, timedelta

# –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è


def get_result(client_name, tracker_impressions, tracker_conversions, size):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ch_client = Client(
                    host=st.secrets["CH_HOST"],  
                    port=9440,   
                    user=st.secrets["CH_USER"],   
                    password=st.secrets["CH_PASSWORD"],
                    database=st.secrets["CH_DATABASE"],
                    secure=True, 
                    verify=False
                    )
    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫)
    columns = [col[0] for col in ch_client.execute(f'DESCRIBE TABLE {client_name}_{tracker_impressions}')]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    # result = ch_client.execute(f'SELECT * FROM {client_name}_{tracker_impressions} LIMIT 10')

    first_date = date_range[0].strftime("%Y-%m-%d")
    second_date = date_range[1].strftime("%Y-%m-%d")
    third_date = date_range[1] + timedelta(days=size)


    query = f"""
        SELECT
            advertising_id,
            event_time,
            last_interaction as date,
            customs_string,
            ad_name,
            event_name,
            event_value,
            ABS(DATEDIFF('day', event_time, last_interaction)) as time_to_conversion 
        FROM 
            

            (SELECT
                    c.advertising_id,
                    c.event_time,
                    a.datetime as last_interaction,
                    ROW_NUMBER() OVER(PARTITION BY c.advertising_id, c.event_time ORDER BY a.datetime DESC) as win,
                    a.customs_string,
                    a.ad_name,
                    c.event_name,
                    c.event_value
                FROM db1.{client_name}_{tracker_conversions} as c
                JOIN db1.{client_name}_{tracker_impressions} as a ON c.advertising_id = a.advertising_id
                WHERE datetime BETWEEN '{first_date}' AND '{second_date}' AND
                event_time BETWEEN '{first_date}' AND '{third_date}' AND
                (toUnixTimestamp(c.event_time) - toUnixTimestamp(a.datetime)) BETWEEN 0 AND {size}*24*60*60
                GROUP BY
                    c.advertising_id,
                    c.event_time,
                    last_interaction,
                    a.customs_string,
                    a.ad_name,
                    c.event_name,
                    c.event_value)
        WHERE win = 1
        ORDER BY event_time"""
    
    result = ch_client.execute(query, with_column_types=True) 

    data = [row for row in result[0]]  # –î–∞–Ω–Ω—ã–µ
    columns = [col[0] for col in result[1]]  # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df = pd.DataFrame(data, columns=columns)
    return df


def execute_query(client_name, tracker_impressions, tracker_conversions, size):

    latest_iteration = st.empty()
    bar = st.progress(0)
    
    for i in range(100):
        latest_iteration.text(f'–ó–∞–≥—Ä—É–∑–∫–∞... {i+1}%')
        bar.progress(i + 1)
        time.sleep(0.02)
    
    df = get_result(client_name, tracker_impressions, tracker_conversions, size)
    
    latest_iteration.empty()
    bar.empty()

    return df

# –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
client_options = ["hoff", "rendezv"]
client_name = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞", client_options)

# –í—ã–±–æ—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker_impressions_options = {"hoff": ["adriver", "hybe"], "rendezv": ["adriver"]}
tracker_impressions = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫–µ—Ä –ø–æ–∫–∞–∑–æ–≤", tracker_impressions_options[client_name])

# –í—ã–±–æ—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker_conversions_options = {"hoff": ["appsflyer"], "rendezv": ["appsflyer"]}
tracker_conversions = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫–µ—Ä –∫–æ–Ω–≤–µ—Ä—Å–∏–π", tracker_conversions_options[client_name])


# –í—ã–±–æ—Ä –¥–∞—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
date_range = st.sidebar.date_input(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏",
    value=(date.today(), date.today()),  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–≥–æ–¥–Ω—è)
    min_value=date(2025, 1, 1),  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–∞—è –¥–∞—Ç–∞
    max_value=date.today(),  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–∞—è –¥–∞—Ç–∞
)




# –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (start_date, end_date)
if isinstance(date_range, tuple) and len(date_range) == 2:
    pass
else:
    st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã.")

# –û–∫–Ω–æ –∞—Ç—Ç—Ä–∏–±—É—Ü–∏–∏
days_to_add = st.sidebar.number_input("–û–∫–Ω–æ –∞—Ç—Ä–∏–±—É—Ü–∏–∏", min_value=0, step=1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state, –µ—Å–ª–∏ df –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if "df" not in st.session_state:
    st.session_state.df = pd.DataFrame()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame

if st.sidebar.button("üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å"):
    df = execute_query(client_name, tracker_impressions, tracker_conversions, days_to_add)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if st.session_state.df is not None:

        if df.empty:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        else:
            st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞")
            st.write(f"–ö–æ–Ω–≤–µ—Ä—Å–∏–π: {df.shape[0]}")
            st.dataframe(df)  # –í—ã–≤–æ–¥–∏–º DataFrame –≤ Streamlit
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ CSV
            csv = df.to_csv(index=False)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                data=csv,
                file_name="data.csv",
                mime="text/csv"
                )


